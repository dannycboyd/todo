use std::str::FromStr;
use crate::task::TaskItem;
use crate::cal::calendar::Repetition;

use crate::parser_cmd::Args;

grammar;

pub Date: Vec<u32> = {
    <day:Num> => vec![day],
    <month:Num> "-" <day:Num> => vec![month, day],
    <month:Num> "-" <day:Num> "-" <year:Year> => vec![month, day, year],
}

Num: u32 = {
    r"[0-9]{1,2}" => u32::from_str(<>).unwrap()
}

Year: u32 = {
    r"'\d{2}|\d{4}" => u32::from_str(<>).unwrap()
}

pub Repeats: Repetition = {
    "n" => Repetition::Never,
    "never" => Repetition::Never,
    "d" => Repetition::Daily,
    "daily" => Repetition::Daily,
    "w" => Repetition::Weekly,
    "weekly" => Repetition::Weekly,
    "m" => Repetition::Monthly,
    "monthly" => Repetition::Monthly,
}

pub Period: (Repetition, Option<Vec<u32>>) = {
    <rep:Repeats> <date:Date?> => match date {
        Some(date) => (rep, Some(date)),
        None => (rep, None)
    }
}

pub Words: String = {
    "`" <list:WordList> "`" => list.join(" ")
}

WordList: Vec<String> = {
    <w:Word> <list:WordList> => {
        let mut newlist = vec![w];
        newlist.extend(list);
        newlist
    },
    Word => vec![<>]
}

Word: String = {
    <w:r"[A-Za-z,.!\-+]+"> => String::from(w)
}

pub Cmd: (Args) = {
    "test" <words:Words> => Args::Test(words),
    "make" <date:Date> <rep:Repeats> <title:Words> <desc:Words> => {
        Args::Make(date, title, desc, rep)
    },
    "show" <when:Period> => Args::Show(when.0, when.1),
    "list" => Args::List,
    "help" => Args::Help,
    "save" => Args::Save,
}
