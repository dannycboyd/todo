#![allow(unused_parens, unused_braces)]
use std::str::FromStr;
use crate::old_task::{RawTaskItem, Mod, Mods};
use crate::cal::Repetition;

use crate::models::item::{NewItem};
use crate::async_direct_cmd::{Args};

use chrono::{DateTime, NaiveDateTime};

// let date_parse_str = String::from();

grammar;

pub Date: Vec<u32> = {
    <day:Num> => vec![day as u32],
    <month:Num> "-" <day:Num> => vec![month as u32, day as u32],
    <month:Num> "-" <day:Num> "-" <year:Year> => vec![month as u32, day as u32, year],
}

Num: i32 = {
    r"[0-9]{1,2}" => i32::from_str(<>).unwrap()
}

Year: u32 = {
    r"'\d{2}|\d{4}" => u32::from_str(<>).unwrap()
}

pub Repeats: Repetition = {
    "n" => Repetition::Never,
    "never" => Repetition::Never,
    "d" => Repetition::Daily,
    "daily" => Repetition::Daily,
    "w" => Repetition::Weekly,
    "weekly" => Repetition::Weekly,
    "m" => Repetition::Monthly,
    "monthly" => Repetition::Monthly,
    "y" => Repetition::Yearly,
    "yearly" => Repetition::Yearly,
}

RepRaw = {
    "n",
    "d",
    "w",
    "m",
    "y"
}

pub Period: (Repetition, Option<Vec<u32>>) = {
    <rep:Repeats> <date:Date?> => match date {
        Some(date) => (rep, Some(date)),
        None => (rep, None)
    }
}

pub Words: String = {
    "`" <list:WordList> "`" => list.join(" ")
}

RFC2822: Option<NaiveDateTime> = {
    <w:r"\d{4} [A-Za-z]{3} \d{2} \d{2}:\d{2}:\d{2} \+\d{4}"> => DateTime::parse_from_str(w, "%Y %b %d %H:%M:%S %z").map(|v| {
        println!("{}", v);
        v.naive_utc()
    }).ok()
}

WordList: Vec<String> = {
    <list:WordList> <w:Word> => {
        let mut list = list;
        list.push(w);
        list
    },
    Word => vec![<>]
}

Word: String = {
    <w:r"[A-Za-z;:,.!\-+]+"> => String::from(w)
}

True: bool = {
    "1" => true,
    "t" => true,
    "true" => true,
    "y" => true,
    "yes" => true
}

False: bool = {
    "0" => false,
    "f" => false
}

Bool: bool = {
    <t:True> => t,
    <f:False> => f
}

// Task: (Vec<u32>, String, String, Repetition) = {
//     <date:Date> <rep:Repeats> <title:Words> <desc:Words> => (date, title, desc, rep),
//     <date:Date> <title:Words> <desc:Words> => (date, title, desc, Repetition::Weekly)
// }

// RawTask: RawTaskItem = {
//     <task:RawTask> <start:Date> => { let mut task = task; task.start = start; task },
//     <task:RawTask> <rep:RepRaw> => { let mut task = task; task.repetition = String::from(rep); task },
//     <task:RawTask> <title:Words> <note:Words> => { let mut task = task; task.title = title; task.note = note; task },
//     <task:RawTask> "t:" <title:Words> => { let mut task = task; task.title = title; task },
//     <task:RawTask> "n:" <note:Words> => { let mut task = task; task.note = note; task },
//     () => { RawTaskItem::new_empty() }
// }

NewItem: NewItem = {
    <item:NewItem> "start" <start:RFC2822> => { let mut item = item; item.start_d = start; item },
    <item:NewItem> "end" <end:RFC2822> => { let mut item = item; item.end_d = end; item },
    <item:NewItem> <rep:RepRaw> => { let mut item = item; item.repeats = Some(String::from(rep)); item },
    <item:NewItem> <title:Words> <note:Words> => { let mut item = item; item.title = title; item.note = Some(note); item },
    <item:NewItem> "cal" => { let mut item = item; item.cal = Some(true); item },
    <item:NewItem> "todo" => { let mut item = item; item.todo = Some(true); item },
    <item:NewItem> "journal" => { let mut item = item; item.journal = Some(true); item },
    () => { NewItem::new() }
}

Modifications: Mods = {
    <mods:Modifications> "start" <start:RFC2822> => { let mut mods = mods; mods.push(Mod::Start(start)); mods },
    <mods:Modifications> "end" <end:RFC2822> => { let mut mods = mods; mods.push(Mod::End(end)); mods },
    <mods:Modifications> <rep:RepRaw> => { let mut mods = mods; mods.push(Mod::Rep(String::from(rep))); mods },
    <mods:Modifications> "t:" <title:Words> => { let mut mods = mods; mods.push(Mod::Title(title)); mods },
    <mods:Modifications> "n:" <note:Words> => { let mut mods = mods; mods.push(Mod::Note(note)); mods },
    <mods:Modifications> "cal" <value:Bool> => { let mut mods = mods; mods.push(Mod::Cal(value)); mods },
    <mods:Modifications> "journal" <value:Bool> => { let mut mods = mods; mods.push(Mod::Journal(value)); mods },
    <mods:Modifications> "todo" <value:Bool> => { let mut mods = mods; mods.push(Mod::Todo(value)); mods },
    () => { Mods::new() }
}

CmdName = {
    "make",
    "mod",
    "show",
    "detail",
    "do",
    "list",
    "help",
    "q"
}

CmdStr: String = {
    CmdName => String::from(<>)
}

pub Recovery: String = {
    <cmd:CmdName> <any:Word*> => String::from(cmd)
}

pub Cmd: Args = {
    "make" <item:NewItem> => { Args::MakeRaw(item) },
    "mod" <id:Num> <modifs:Modifications> => { Args::Mods(id, modifs) },
    "show" <when:Period> => Args::Show(when.0, when.1),
    "detail" <id:Num> => { Args::Detail(id) },
    "do" <id:Num> <date:Date?> <t:Bool?> => {
        let t = match t {
            Some(value) => value,
            None => false
        };
        Args::Do(id, date, t)
    },
    "list" => Args::List,
    "help" <w:CmdStr?> => Args::Help(w),
    "q" => Args::Quit,
    () => Args::NoOp,
}
